create table scale_factor_repl(c1 int, c2 int) distributed replicated;
create table scale_factor_distr(c1 int, c2 int) distributed by (c1);
create table scale_factor_rand_distr(c1 int, c2 int);
create table scale_factor_partitioned (a int) partition by range(a) (start(1) end(10) every(1));
set allow_system_table_mods = on;
create table scale_factor_part_distr(c1 int, c2 int) distributed by(c1);
update gp_distribution_policy set numsegments = 2 where localoid = 'scale_factor_part_distr'::regclass;
reset allow_system_table_mods;
insert into scale_factor_repl select i,i from generate_series(1, 10)i;
insert into scale_factor_distr select i,i from generate_series(1, 10)i;
insert into scale_factor_rand_distr select i,i from generate_series(5, 15)i;
insert into scale_factor_part_distr select i,i from generate_series(1, 10)i;
insert into scale_factor_partitioned values (1), (1), (1);
analyze scale_factor_repl;
analyze scale_factor_distr;
analyze scale_factor_rand_distr;
analyze scale_factor_part_distr;
analyze scale_factor_partitioned;
--
-- scaleFactor, motion_snd and motion_recv definition tests
-- Test cases cover conditions refactored or removed
-- from the old ExplainNode implementation.
--
set optimizer = off;
-- CdbPathLocus_IsSingleQE (PO)
explain select * from scale_factor_distr where c2 < (select c1/2 from scale_factor_rand_distr limit 3);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=1.00..4.12 rows=4 width=8)
   ->  Seq Scan on scale_factor_distr  (cost=1.00..4.12 rows=2 width=8)
         Filter: (c2 < $0)
         InitPlan 1 (returns $0)  (slice3)
           ->  Limit  (cost=0.00..1.00 rows=3 width=4)
                 ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1.00 rows=3 width=4)
                       ->  Limit  (cost=0.00..0.94 rows=1 width=4)
                             ->  Seq Scan on scale_factor_rand_distr  (cost=0.00..3.12 rows=4 width=4)
 Optimizer: Postgres query optimizer
(9 rows)

-- CdbPathLocus_IsSegmentGeneral (PO)
explain select * from scale_factor_repl limit 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit  (cost=0.00..0.13 rows=1 width=8)
   ->  Gather Motion 1:1  (slice1; segments: 1)  (cost=0.00..1.30 rows=10 width=8)
         ->  Seq Scan on scale_factor_repl  (cost=0.00..1.10 rows=10 width=8)
 Optimizer: Postgres query optimizer
(4 rows)

-- Direct dispatch (PO)
explain select * from scale_factor_distr where c1 = 2 or c1 = 5;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..3.15 rows=2 width=8)
   ->  Seq Scan on scale_factor_distr  (cost=0.00..3.15 rows=1 width=8)
         Filter: ((c1 = 2) OR (c1 = 5))
 Optimizer: Postgres query optimizer
(4 rows)

reset optimizer;
-- Direct dispatch (ORCA)
explain select count(*) from scale_factor_partitioned where a = 1;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..431.00 rows=1 width=8)
   ->  Gather Motion 1:1  (slice1; segments: 1)  (cost=0.00..431.00 rows=3 width=1)
         ->  Result  (cost=0.00..431.00 rows=3 width=1)
               ->  Sequence  (cost=0.00..431.00 rows=3 width=4)
                     ->  Partition Selector for scale_factor_partitioned (dynamic scan id: 1)  (cost=10.00..100.00 rows=100 width=4)
                           Partitions selected: 1 (out of 9)
                     ->  Dynamic Seq Scan on scale_factor_partitioned (dynamic scan id: 1)  (cost=0.00..431.00 rows=3 width=4)
                           Filter: (a = 1)
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

-- Partial table (fallback to PO)
explain select * from scale_factor_part_distr;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..2.10 rows=10 width=8)
   ->  Seq Scan on scale_factor_part_distr  (cost=0.00..2.10 rows=5 width=8)
 Optimizer: Postgres query optimizer
(3 rows)

-- Explicit Gather Motion
explain update scale_factor_repl a set c1 = b.c2 from scale_factor_part_distr b returning *;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Explicit Gather Motion 3:1  (slice2; segments: 3)  (cost=10000000000.00..10000000006.98 rows=100 width=28)
   ->  Update on scale_factor_repl a  (cost=10000000000.00..10000000006.98 rows=34 width=28)
         ->  Nested Loop  (cost=10000000000.00..10000000006.98 rows=100 width=28)
               ->  Seq Scan on scale_factor_repl a  (cost=0.00..1.10 rows=10 width=14)
               ->  Materialize  (cost=0.00..2.65 rows=10 width=14)
                     ->  Broadcast Motion 2:3  (slice1; segments: 2)  (cost=0.00..2.50 rows=15 width=14)
                           ->  Seq Scan on scale_factor_part_distr b  (cost=0.00..2.10 rows=5 width=14)
 Optimizer: Postgres query optimizer
(8 rows)

-- Explicit Redistribute Motion
explain update scale_factor_part_distr pd set c2=(select c2 from scale_factor_distr d where pd.c1 = d.c1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Update on scale_factor_part_distr pd  (cost=0.00..33.35 rows=5 width=14)
   ->  Explicit Redistribute Motion 2:2  (slice2; segments: 2)  (cost=0.00..33.35 rows=5 width=14)
         ->  Seq Scan on scale_factor_part_distr pd  (cost=0.00..33.35 rows=5 width=14)
               SubPlan 1  (slice2; segments: 2)
                 ->  Result  (cost=0.00..3.13 rows=1 width=4)
                       Filter: (pd.c1 = d.c1)
                       ->  Materialize  (cost=0.00..3.13 rows=1 width=4)
                             ->  Broadcast Motion 3:2  (slice1; segments: 3)  (cost=0.00..3.12 rows=1 width=4)
                                   ->  Seq Scan on scale_factor_distr d  (cost=0.00..3.12 rows=1 width=4)
 Optimizer: Postgres query optimizer
(10 rows)

--
-- Previously erroneous cases:
--
-- node(s) above Gather Motion in slice0 (used to show incorrect value for ORCA)
explain select t1.c1, row_number() over (order by t1.c1 desc) from scale_factor_distr t1 join scale_factor_distr t2 using(c2);
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 WindowAgg  (cost=0.00..862.00 rows=11 width=12)
   Order By: scale_factor_distr.c1
   ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..862.00 rows=11 width=4)
         Merge Key: scale_factor_distr.c1
         ->  Sort  (cost=0.00..862.00 rows=4 width=4)
               Sort Key: scale_factor_distr.c1
               ->  Hash Join  (cost=0.00..862.00 rows=4 width=4)
                     Hash Cond: (scale_factor_distr.c2 = scale_factor_distr_1.c2)
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=4 width=8)
                           Hash Key: scale_factor_distr.c2
                           ->  Seq Scan on scale_factor_distr  (cost=0.00..431.00 rows=4 width=8)
                     ->  Hash  (cost=431.00..431.00 rows=4 width=4)
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.00 rows=4 width=4)
                                 Hash Key: scale_factor_distr_1.c2
                                 ->  Seq Scan on scale_factor_distr scale_factor_distr_1  (cost=0.00..431.00 rows=4 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(16 rows)

drop table scale_factor_repl;
drop table scale_factor_distr;
drop table scale_factor_rand_distr;
drop table scale_factor_part_distr;
drop table scale_factor_partitioned;