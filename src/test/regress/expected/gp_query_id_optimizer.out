--
-- Test the query command identification
--
create extension if not exists gp_inject_fault;
set client_min_messages = notice;
select gp_inject_fault('all', 'reset', dbid) from gp_segment_configuration;
 gp_inject_fault 
-----------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

create or replace function sirv_function() returns text as $$
declare
    result1 text;
    result2 text;
    result3 text;
begin
    create table test_data1 (x int, y int) distributed by (x);
    create table test_data2 (x int, y varchar) distributed by(x);

    execute 'insert into test_data1 values (1,1)';
    execute 'insert into test_data1 values (1,2)';

    execute 'insert into test_data2 values (1, ''one'')';
    execute 'insert into test_data2 values (1, ''ONE'')';

    execute 'select case when count(*)>0 then ''PASS'' else ''FAIL'' end from test_data1' into result1;
    execute 'select case when count(*)>0 then ''PASS'' else ''FAIL'' end from test_data2' into result2;

    execute 'drop table test_data1';
    execute 'drop table test_data2';

    if (result1 = 'PASS')  and  (result2 = 'PASS') then
        result3 = 'PASS';
    else
        result3 = 'FAIL';
    end if;
    return result3;
end $$ language plpgsql volatile;
\c
select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  END ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  START ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  END ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  START ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  END ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

select sirv_function();
NOTICE:  START ExecutorStart | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorStart | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorRun | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 5
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 5
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 6
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 6
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 7
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 8
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 13
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 13
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 14
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 14
NOTICE:  END ExecutorRun | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorFinish | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorFinish | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorEnd | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorEnd | Q: select sirv_function(); | QUERY ID: 4
 sirv_function 
---------------
 PASS
(1 row)

-- Test that the query command id is correct after execution of queries in the InitPlan
create table t as select (select sirv_function()) as res distributed by (res);
NOTICE:  START ProcessUtility | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 16
NOTICE:  START ExecutorStart | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 18
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 18
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 19
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 19
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 20
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 21
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 26
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 26
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 27
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 27
NOTICE:  END ExecutorStart | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ExecutorRun | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ExecutorRun | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ExecutorFinish | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ExecutorFinish | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ExecutorEnd | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ExecutorEnd | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ProcessUtility | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 16
-- Test a simple query
select * from t;
NOTICE:  START ExecutorStart | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorStart | Q: select * from t; | QUERY ID: 29
NOTICE:  START ExecutorRun | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorRun | Q: select * from t; | QUERY ID: 29
NOTICE:  START ExecutorFinish | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorFinish | Q: select * from t; | QUERY ID: 29
NOTICE:  START ExecutorEnd | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorEnd | Q: select * from t; | QUERY ID: 29
 res  
------
 PASS
(1 row)

drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 31
NOTICE:  END ProcessUtility | Q: drop table t; | QUERY ID: 31
-- Test a cursor
begin;
NOTICE:  START ProcessUtility | Q: begin; | QUERY ID: 33
NOTICE:  END ProcessUtility | Q: begin; | QUERY ID: 33
declare cur1 cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 35
NOTICE:  START ExecutorStart | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorStart | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ProcessUtility | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 35
fetch 1 from cur1;
NOTICE:  START ProcessUtility | Q: fetch 1 from cur1; | QUERY ID: 38
NOTICE:  START ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 39
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 39
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 40
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 40
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 41
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 42
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 47
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 47
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 48
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 48
NOTICE:  END ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ProcessUtility | Q: fetch 1 from cur1; | QUERY ID: 38
 res  
------
 PASS
(1 row)

fetch all from cur1;
NOTICE:  START ProcessUtility | Q: fetch all from cur1; | QUERY ID: 50
NOTICE:  START ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ProcessUtility | Q: fetch all from cur1; | QUERY ID: 50
 res 
-----
(0 rows)

commit;
NOTICE:  START ProcessUtility | Q: commit; | QUERY ID: 52
NOTICE:  END ProcessUtility | Q: commit; | QUERY ID: 52
NOTICE:  START ExecutorFinish | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorFinish | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  START ExecutorEnd | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorEnd | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
-- Test two cursors
begin;
NOTICE:  START ProcessUtility | Q: begin; | QUERY ID: 54
NOTICE:  END ProcessUtility | Q: begin; | QUERY ID: 54
declare cur1_a cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 56
NOTICE:  START ExecutorStart | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorStart | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ProcessUtility | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 56
fetch 1 from cur1_a;
NOTICE:  START ProcessUtility | Q: fetch 1 from cur1_a; | QUERY ID: 59
NOTICE:  START ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 60
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 60
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 61
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 61
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 62
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 63
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 68
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 68
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 69
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 69
NOTICE:  END ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ProcessUtility | Q: fetch 1 from cur1_a; | QUERY ID: 59
 res  
------
 PASS
(1 row)

declare cur2_b cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 71
NOTICE:  START ExecutorStart | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorStart | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ProcessUtility | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 71
fetch 2 from cur2_b;
NOTICE:  START ProcessUtility | Q: fetch 2 from cur2_b; | QUERY ID: 74
NOTICE:  START ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 75
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 75
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 76
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 76
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 77
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 78
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 83
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 83
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 84
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 84
NOTICE:  END ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ProcessUtility | Q: fetch 2 from cur2_b; | QUERY ID: 74
 res  
------
 PASS
(1 row)

fetch all from cur2_b;
NOTICE:  START ProcessUtility | Q: fetch all from cur2_b; | QUERY ID: 86
NOTICE:  START ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ProcessUtility | Q: fetch all from cur2_b; | QUERY ID: 86
 res 
-----
(0 rows)

fetch all from cur1_a;
NOTICE:  START ProcessUtility | Q: fetch all from cur1_a; | QUERY ID: 88
NOTICE:  START ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ProcessUtility | Q: fetch all from cur1_a; | QUERY ID: 88
 res 
-----
(0 rows)

commit;
NOTICE:  START ProcessUtility | Q: commit; | QUERY ID: 90
NOTICE:  END ProcessUtility | Q: commit; | QUERY ID: 90
NOTICE:  START ExecutorFinish | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorFinish | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  START ExecutorEnd | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorEnd | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  START ExecutorFinish | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorFinish | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  START ExecutorEnd | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorEnd | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
-- Test partitioned tables
create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra);
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 92
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 92
alter table t rename to t1;
NOTICE:  START ProcessUtility | Q: alter table t rename to t1; | QUERY ID: 94
NOTICE:  END ProcessUtility | Q: alter table t rename to t1; | QUERY ID: 94
alter table t1 rename to t2;
NOTICE:  START ProcessUtility | Q: alter table t1 rename to t2; | QUERY ID: 96
NOTICE:  END ProcessUtility | Q: alter table t1 rename to t2; | QUERY ID: 96
drop table t2;
NOTICE:  START ProcessUtility | Q: drop table t2; | QUERY ID: 98
NOTICE:  END ProcessUtility | Q: drop table t2; | QUERY ID: 98
-- Test a function written in sql language, that optimizers cannot inline
create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql;
NOTICE:  START ProcessUtility | Q: create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql; | QUERY ID: 100
NOTICE:  END ProcessUtility | Q: create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql; | QUERY ID: 100
select not_inlineable_sql_func(i) from generate_series(1, 10)i;
NOTICE:  START ExecutorStart | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
NOTICE:  END ExecutorStart | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
NOTICE:  START ExecutorRun | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 103
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 104
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 105
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 106
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 107
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 108
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 109
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 110
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 111
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 112
NOTICE:  END ExecutorRun | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
NOTICE:  START ExecutorFinish | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
NOTICE:  END ExecutorFinish | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
NOTICE:  START ExecutorEnd | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
NOTICE:  END ExecutorEnd | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 102
 not_inlineable_sql_func 
-------------------------
                       0
                       0
                       0
                       0
                       0
                       1
                       1
                       1
                       1
                       1
(10 rows)

select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  START ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 114
NOTICE:  END ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 114
NOTICE:  START ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 114
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

-- Test the query command ids dispatched to segments
select gp_inject_fault_infinite('track_query_command_id_at_start', 'skip', dbid) from gp_segment_configuration;
 gp_inject_fault_infinite 
--------------------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

create table t as select 1;
NOTICE:  START ProcessUtility | Q: create table t as select 1; | QUERY ID: 118
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 119
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 119  (seg0 127.0.1.1:6002 pid=403017)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 119  (seg1 127.0.1.1:6003 pid=403018)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 119  (seg2 127.0.1.1:6004 pid=403019)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 119  (seg0 slice1 127.0.1.1:6002 pid=403060)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 119  (seg2 slice1 127.0.1.1:6004 pid=403061)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 119  (seg0 127.0.1.1:6002 pid=403017)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 119  (seg2 127.0.1.1:6004 pid=403019)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 119  (seg1 127.0.1.1:6003 pid=403018)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 119  (seg1 slice1 127.0.1.1:6003 pid=403051)
drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 121
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 121  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 121  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 121  (seg2 127.0.1.1:6004 pid=314507)
create table t (i int, j text) with (appendonly = true) distributed by (i);
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 123
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 123  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 123  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 123  (seg2 127.0.1.1:6004 pid=314507)
insert into t select i, (i + 1)::text from generate_series(1, 100) i;
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 125
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 125  (seg0 127.0.1.1:7002 pid=164935)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 125  (seg2 127.0.1.1:7004 pid=164937)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 125  (seg1 127.0.1.1:7003 pid=164936)
drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 127
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 127  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 127  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 127  (seg1 127.0.1.1:6003 pid=314508)
select gp_inject_fault_infinite('track_query_command_id_at_start', 'reset', dbid) from gp_segment_configuration;
NOTICE:  START ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id_at_start', 'reset', dbid) from gp_segment_configuration; | QUERY ID: 129
 gp_inject_fault_infinite 
--------------------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

drop function sirv_function();
drop function not_inlineable_sql_func(i int);
reset client_min_messages;
