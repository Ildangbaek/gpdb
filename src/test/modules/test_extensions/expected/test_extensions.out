-- CVE-2022-2625
-- https://github.com/postgres/postgres/commit/5919bb5a5989cda232ac3d1f8b9d90f337be2077
--
-- It's generally bad style to use CREATE OR REPLACE unnecessarily.
-- Test what happens if an extension does it anyway.
-- Replacing a shell type or operator is sort of like CREATE OR REPLACE;
-- check that too.
CREATE FUNCTION ext_cor_func() RETURNS text
  AS $$ SELECT 'ext_cor_func: original'::text $$ LANGUAGE sql;
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  function ext_cor_func() is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
SELECT ext_cor_func();
      ext_cor_func      
------------------------
 ext_cor_func: original
(1 row)

DROP FUNCTION ext_cor_func();
CREATE VIEW ext_cor_view AS
  SELECT 'ext_cor_view: original'::text AS col;
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  view ext_cor_view is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
SELECT ext_cor_func();
ERROR:  function ext_cor_func() does not exist
LINE 1: SELECT ext_cor_func();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT * FROM ext_cor_view;
          col           
------------------------
 ext_cor_view: original
(1 row)

DROP VIEW ext_cor_view;
CREATE TYPE test_ext_type;
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  type test_ext_type is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
DROP TYPE test_ext_type;
-- this makes a shell "point <<@@ polygon" operator too
CREATE OPERATOR @@>> ( PROCEDURE = poly_contain_pt,
  LEFTARG = polygon, RIGHTARG = point,
  COMMUTATOR = <<@@ );
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  operator <<@@(point,polygon) is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
DROP OPERATOR <<@@ (point, polygon);
CREATE EXTENSION test_ext_cor;  -- now it should work
SELECT ext_cor_func();
         ext_cor_func         
------------------------------
 ext_cor_func: from extension
(1 row)

SELECT * FROM ext_cor_view;
             col              
------------------------------
 ext_cor_view: from extension
(1 row)

SELECT 'x'::test_ext_type;
 test_ext_type 
---------------
 x
(1 row)

SELECT point(0,0) <<@@ polygon(circle(point(0,0),1));
 ?column? 
----------
 t
(1 row)

\dx+ test_ext_cor
Objects in extension "test_ext_cor"
      Object Description      
------------------------------
 function ext_cor_func()
 operator <<@@(point,polygon)
 type test_ext_type
 view ext_cor_view
(4 rows)

--
-- CREATE IF NOT EXISTS is an entirely unsound thing for an extension
-- to be doing, but let's at least plug the major security hole in it.
--
CREATE SCHEMA ext_cine_schema;
CREATE EXTENSION test_ext_cine;  -- fail
ERROR:  schema ext_cine_schema is not a member of extension "test_ext_cine"
DETAIL:  An extension may only use CREATE ... IF NOT EXISTS to skip object creation if the conflicting object is one that it already owns.
DROP SCHEMA ext_cine_schema;
CREATE TABLE ext_cine_tab1 (x int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE EXTENSION test_ext_cine;  -- fail
ERROR:  table ext_cine_tab1 is not a member of extension "test_ext_cine"
DETAIL:  An extension may only use CREATE ... IF NOT EXISTS to skip object creation if the conflicting object is one that it already owns.
DROP TABLE ext_cine_tab1;
CREATE EXTENSION test_ext_cine;
\dx+ test_ext_cine
Objects in extension "test_ext_cine"
   Object Description   
------------------------
 schema ext_cine_schema
 table ext_cine_tab1
(2 rows)

ALTER EXTENSION test_ext_cine UPDATE TO '1.1';
\dx+ test_ext_cine
Objects in extension "test_ext_cine"
   Object Description   
------------------------
 schema ext_cine_schema
 table ext_cine_tab1
 table ext_cine_tab3
(3 rows)

--
-- test case for `create extension ... with schema version from unpackaged`
-- (related to problem: https://github.com/greenplum-db/gpdb/issues/6716)
--
-- create schema for extension (and it's functions) and reset search_path to new schema 
show search_path;
  search_path   
----------------
 "$user",public
(1 row)

create schema foo;
set search_path=foo;
-- Create extension functions. Code copied from from test_ext_unpackaged--1.0.sql
-- to run 
create function test_func1(a int, b int) returns int
as $$
begin
	return a + b;
end;
$$
LANGUAGE plpgsql;
create function test_func2(a int, b int) returns int
as $$
begin
	return a - b;
end;
$$
LANGUAGE plpgsql;
-- restore search path
reset search_path;
begin;
-- change search_path
set search_path=pg_catalog;
show search_path;
 search_path 
-------------
 pg_catalog
(1 row)

-- create extension in schema foo
create extension test_ext_unpackaged with schema foo version '1.1' from unpackaged;
-- check that search path doesn't changed after create extension
show search_path;
 search_path 
-------------
 pg_catalog
(1 row)

-- show functions at schema foo (check that create extension works correctly)
set search_path=foo;
\df
                           List of functions
 Schema |    Name    | Result data type | Argument data types  |  Type  
--------+------------+------------------+----------------------+--------
 foo    | test_func1 | integer          | a integer, b integer | normal
 foo    | test_func2 | integer          | a integer, b integer | normal
(2 rows)

SELECT e.extname, ne.nspname AS extschema, p.proname, np.nspname AS proschema
FROM pg_catalog.pg_extension AS e
    INNER JOIN pg_catalog.pg_depend AS d ON (d.refobjid = e.oid)
    INNER JOIN pg_catalog.pg_proc AS p ON (p.oid = d.objid)
    INNER JOIN pg_catalog.pg_namespace AS ne ON (ne.oid = e.extnamespace)
    INNER JOIN pg_catalog.pg_namespace AS np ON (np.oid = p.pronamespace)
WHERE d.deptype = 'e' and e.extname = 'test_ext_unpackaged'
ORDER BY 1, 3;
       extname       | extschema |  proname   | proschema 
---------------------+-----------+------------+-----------
 test_ext_unpackaged | foo       | test_func2 | foo
(1 row)

rollback;
drop schema foo cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to function foo.test_func1(integer,integer)
drop cascades to function foo.test_func2(integer,integer)
